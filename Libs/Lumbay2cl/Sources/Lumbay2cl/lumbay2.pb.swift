// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Libs/Lumbay2cl/Sources/Lumbay2cl/lumbay2.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Lumbay2sv_GameStatus: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case none // = 0
  case waitingForOtherPlayer // = 1
  case readyToStart // = 2
  case started // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .none
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .none
    case 1: self = .waitingForOtherPlayer
    case 2: self = .readyToStart
    case 3: self = .started
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .none: return 0
    case .waitingForOtherPlayer: return 1
    case .readyToStart: return 2
    case .started: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Lumbay2sv_GameStatus] = [
    .none,
    .waitingForOtherPlayer,
    .readyToStart,
    .started,
  ]

}

public enum Lumbay2sv_WorldOneStatus: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case nothing // = 0
  case player1ToMove // = 1
  case player2ToMove // = 2
  case player1Wins // = 3
  case player2Wins // = 4
  case draw // = 5
  case UNRECOGNIZED(Int)

  public init() {
    self = .nothing
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .nothing
    case 1: self = .player1ToMove
    case 2: self = .player2ToMove
    case 3: self = .player1Wins
    case 4: self = .player2Wins
    case 5: self = .draw
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .nothing: return 0
    case .player1ToMove: return 1
    case .player2ToMove: return 2
    case .player1Wins: return 3
    case .player2Wins: return 4
    case .draw: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Lumbay2sv_WorldOneStatus] = [
    .nothing,
    .player1ToMove,
    .player2ToMove,
    .player1Wins,
    .player2Wins,
    .draw,
  ]

}

public struct Lumbay2sv_Update: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var sequenceNumber: Int64 = 0

  public var type: Lumbay2sv_Update.OneOf_Type? = nil

  public var ping: Lumbay2sv_Ping {
    get {
      if case .ping(let v)? = type {return v}
      return Lumbay2sv_Ping()
    }
    set {type = .ping(newValue)}
  }

  public var youAreInGameUpdate: Lumbay2sv_YouAreInGameUpdate {
    get {
      if case .youAreInGameUpdate(let v)? = type {return v}
      return Lumbay2sv_YouAreInGameUpdate()
    }
    set {type = .youAreInGameUpdate(newValue)}
  }

  public var waitingForOtherPlayerUpdate: Lumbay2sv_WaitingForOtherPlayerUpdate {
    get {
      if case .waitingForOtherPlayerUpdate(let v)? = type {return v}
      return Lumbay2sv_WaitingForOtherPlayerUpdate()
    }
    set {type = .waitingForOtherPlayerUpdate(newValue)}
  }

  public var readyToStartUpdate: Lumbay2sv_ReadyToStartUpdate {
    get {
      if case .readyToStartUpdate(let v)? = type {return v}
      return Lumbay2sv_ReadyToStartUpdate()
    }
    set {type = .readyToStartUpdate(newValue)}
  }

  public var gameCodeGenerated: Lumbay2sv_GameCodeGeneratedUpdate {
    get {
      if case .gameCodeGenerated(let v)? = type {return v}
      return Lumbay2sv_GameCodeGeneratedUpdate()
    }
    set {type = .gameCodeGenerated(newValue)}
  }

  public var youQuitTheGameUpdate: Lumbay2sv_YouQuitTheGameUpdate {
    get {
      if case .youQuitTheGameUpdate(let v)? = type {return v}
      return Lumbay2sv_YouQuitTheGameUpdate()
    }
    set {type = .youQuitTheGameUpdate(newValue)}
  }

  public var gameStartedUpdate: Lumbay2sv_GameStartedUpdate {
    get {
      if case .gameStartedUpdate(let v)? = type {return v}
      return Lumbay2sv_GameStartedUpdate()
    }
    set {type = .gameStartedUpdate(newValue)}
  }

  public var worldUpdate: Lumbay2sv_WorldUpdate {
    get {
      if case .worldUpdate(let v)? = type {return v}
      return Lumbay2sv_WorldUpdate()
    }
    set {type = .worldUpdate(newValue)}
  }

  public var worldStatusUpdate: Lumbay2sv_WorldStatusUpdate {
    get {
      if case .worldStatusUpdate(let v)? = type {return v}
      return Lumbay2sv_WorldStatusUpdate()
    }
    set {type = .worldStatusUpdate(newValue)}
  }

  public var worldRegionStatusUpdate: Lumbay2sv_WorldRegionStatusUpdate {
    get {
      if case .worldRegionStatusUpdate(let v)? = type {return v}
      return Lumbay2sv_WorldRegionStatusUpdate()
    }
    set {type = .worldRegionStatusUpdate(newValue)}
  }

  public var worldObjectUpdate: Lumbay2sv_WorldObjectUpdate {
    get {
      if case .worldObjectUpdate(let v)? = type {return v}
      return Lumbay2sv_WorldObjectUpdate()
    }
    set {type = .worldObjectUpdate(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Type: Equatable, Sendable {
    case ping(Lumbay2sv_Ping)
    case youAreInGameUpdate(Lumbay2sv_YouAreInGameUpdate)
    case waitingForOtherPlayerUpdate(Lumbay2sv_WaitingForOtherPlayerUpdate)
    case readyToStartUpdate(Lumbay2sv_ReadyToStartUpdate)
    case gameCodeGenerated(Lumbay2sv_GameCodeGeneratedUpdate)
    case youQuitTheGameUpdate(Lumbay2sv_YouQuitTheGameUpdate)
    case gameStartedUpdate(Lumbay2sv_GameStartedUpdate)
    case worldUpdate(Lumbay2sv_WorldUpdate)
    case worldStatusUpdate(Lumbay2sv_WorldStatusUpdate)
    case worldRegionStatusUpdate(Lumbay2sv_WorldRegionStatusUpdate)
    case worldObjectUpdate(Lumbay2sv_WorldObjectUpdate)

  }

  public init() {}
}

public struct Lumbay2sv_Request: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var type: Lumbay2sv_Request.OneOf_Type? = nil

  public var acquireClientIDRequest: Lumbay2sv_AcquireClientIdRequest {
    get {
      if case .acquireClientIDRequest(let v)? = type {return v}
      return Lumbay2sv_AcquireClientIdRequest()
    }
    set {type = .acquireClientIDRequest(newValue)}
  }

  public var acquirePublicKeyRequest: Lumbay2sv_AcquirePublicKeyRequest {
    get {
      if case .acquirePublicKeyRequest(let v)? = type {return v}
      return Lumbay2sv_AcquirePublicKeyRequest()
    }
    set {type = .acquirePublicKeyRequest(newValue)}
  }

  public var createGameRequest: Lumbay2sv_CreateGameRequest {
    get {
      if case .createGameRequest(let v)? = type {return v}
      return Lumbay2sv_CreateGameRequest()
    }
    set {type = .createGameRequest(newValue)}
  }

  public var generateGameCodeRequest: Lumbay2sv_GenerateGameCodeRequest {
    get {
      if case .generateGameCodeRequest(let v)? = type {return v}
      return Lumbay2sv_GenerateGameCodeRequest()
    }
    set {type = .generateGameCodeRequest(newValue)}
  }

  public var joinGameRequest: Lumbay2sv_JoinGameRequest {
    get {
      if case .joinGameRequest(let v)? = type {return v}
      return Lumbay2sv_JoinGameRequest()
    }
    set {type = .joinGameRequest(newValue)}
  }

  public var quitGameRequest: Lumbay2sv_QuitGameRequest {
    get {
      if case .quitGameRequest(let v)? = type {return v}
      return Lumbay2sv_QuitGameRequest()
    }
    set {type = .quitGameRequest(newValue)}
  }

  public var startGameRequest: Lumbay2sv_StartGameRequest {
    get {
      if case .startGameRequest(let v)? = type {return v}
      return Lumbay2sv_StartGameRequest()
    }
    set {type = .startGameRequest(newValue)}
  }

  public var amendWorldObjectRequest: Lumbay2sv_AmendWorldObjectRequest {
    get {
      if case .amendWorldObjectRequest(let v)? = type {return v}
      return Lumbay2sv_AmendWorldObjectRequest()
    }
    set {type = .amendWorldObjectRequest(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Type: Equatable, Sendable {
    case acquireClientIDRequest(Lumbay2sv_AcquireClientIdRequest)
    case acquirePublicKeyRequest(Lumbay2sv_AcquirePublicKeyRequest)
    case createGameRequest(Lumbay2sv_CreateGameRequest)
    case generateGameCodeRequest(Lumbay2sv_GenerateGameCodeRequest)
    case joinGameRequest(Lumbay2sv_JoinGameRequest)
    case quitGameRequest(Lumbay2sv_QuitGameRequest)
    case startGameRequest(Lumbay2sv_StartGameRequest)
    case amendWorldObjectRequest(Lumbay2sv_AmendWorldObjectRequest)

  }

  public init() {}
}

public struct Lumbay2sv_Reply: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var type: Lumbay2sv_Reply.OneOf_Type? = nil

  public var acquireClientIDReply: Lumbay2sv_AcquireClientIdReply {
    get {
      if case .acquireClientIDReply(let v)? = type {return v}
      return Lumbay2sv_AcquireClientIdReply()
    }
    set {type = .acquireClientIDReply(newValue)}
  }

  public var acquirePublicKeyReply: Lumbay2sv_AcquirePublicKeyReply {
    get {
      if case .acquirePublicKeyReply(let v)? = type {return v}
      return Lumbay2sv_AcquirePublicKeyReply()
    }
    set {type = .acquirePublicKeyReply(newValue)}
  }

  public var createGameReply: Lumbay2sv_CreateGameReply {
    get {
      if case .createGameReply(let v)? = type {return v}
      return Lumbay2sv_CreateGameReply()
    }
    set {type = .createGameReply(newValue)}
  }

  public var generateGameCodeReply: Lumbay2sv_GenerateGameCodeReply {
    get {
      if case .generateGameCodeReply(let v)? = type {return v}
      return Lumbay2sv_GenerateGameCodeReply()
    }
    set {type = .generateGameCodeReply(newValue)}
  }

  public var joinGameReply: Lumbay2sv_JoinGameReply {
    get {
      if case .joinGameReply(let v)? = type {return v}
      return Lumbay2sv_JoinGameReply()
    }
    set {type = .joinGameReply(newValue)}
  }

  public var quitGameReply: Lumbay2sv_QuitGameReply {
    get {
      if case .quitGameReply(let v)? = type {return v}
      return Lumbay2sv_QuitGameReply()
    }
    set {type = .quitGameReply(newValue)}
  }

  public var startGameReply: Lumbay2sv_StartGameReply {
    get {
      if case .startGameReply(let v)? = type {return v}
      return Lumbay2sv_StartGameReply()
    }
    set {type = .startGameReply(newValue)}
  }

  public var amendWorldObjectReply: Lumbay2sv_AmendWorldObjectReply {
    get {
      if case .amendWorldObjectReply(let v)? = type {return v}
      return Lumbay2sv_AmendWorldObjectReply()
    }
    set {type = .amendWorldObjectReply(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Type: Equatable, Sendable {
    case acquireClientIDReply(Lumbay2sv_AcquireClientIdReply)
    case acquirePublicKeyReply(Lumbay2sv_AcquirePublicKeyReply)
    case createGameReply(Lumbay2sv_CreateGameReply)
    case generateGameCodeReply(Lumbay2sv_GenerateGameCodeReply)
    case joinGameReply(Lumbay2sv_JoinGameReply)
    case quitGameReply(Lumbay2sv_QuitGameReply)
    case startGameReply(Lumbay2sv_StartGameReply)
    case amendWorldObjectReply(Lumbay2sv_AmendWorldObjectReply)

  }

  public init() {}
}

public struct Lumbay2sv_WorldStatus: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var type: Lumbay2sv_WorldStatus.OneOf_Type? = nil

  public var worldOneStatus: Lumbay2sv_WorldOneStatus {
    get {
      if case .worldOneStatus(let v)? = type {return v}
      return .nothing
    }
    set {type = .worldOneStatus(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Type: Equatable, Sendable {
    case worldOneStatus(Lumbay2sv_WorldOneStatus)

  }

  public init() {}
}

public struct Lumbay2sv_Empty: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Lumbay2sv_AcquireClientIdRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Lumbay2sv_AcquirePublicKeyRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Lumbay2sv_AcquireClientIdReply: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var clientID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Lumbay2sv_AcquirePublicKeyReply: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var publicKey: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Lumbay2sv_CreateGameRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Lumbay2sv_CreateGameReply: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Lumbay2sv_GenerateGameCodeRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Lumbay2sv_GenerateGameCodeReply: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Lumbay2sv_JoinGameRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var gameCode: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Lumbay2sv_JoinGameReply: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Lumbay2sv_QuitGameRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Lumbay2sv_QuitGameReply: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Lumbay2sv_StartGameRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Lumbay2sv_StartGameReply: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Lumbay2sv_AmendWorldObjectRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var worldID: String = String()

  public var worldRegionID: String = String()

  public var worldObject: Lumbay2sv_WorldObject {
    get {return _worldObject ?? Lumbay2sv_WorldObject()}
    set {_worldObject = newValue}
  }
  /// Returns true if `worldObject` has been explicitly set.
  public var hasWorldObject: Bool {return self._worldObject != nil}
  /// Clears the value of `worldObject`. Subsequent reads from it will return its default value.
  public mutating func clearWorldObject() {self._worldObject = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _worldObject: Lumbay2sv_WorldObject? = nil
}

public struct Lumbay2sv_AmendWorldObjectReply: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Lumbay2sv_Game: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var player1: String = String()

  public var player2: String = String()

  public var status: Lumbay2sv_GameStatus = .none

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Lumbay2sv_Client: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var salt: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Lumbay2sv_World: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var name: String = String()

  public var status: Lumbay2sv_WorldStatus {
    get {return _status ?? Lumbay2sv_WorldStatus()}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {self._status = nil}

  public var map: Lumbay2sv_WorldMap {
    get {return _map ?? Lumbay2sv_WorldMap()}
    set {_map = newValue}
  }
  /// Returns true if `map` has been explicitly set.
  public var hasMap: Bool {return self._map != nil}
  /// Clears the value of `map`. Subsequent reads from it will return its default value.
  public mutating func clearMap() {self._map = nil}

  public var region: [Lumbay2sv_WorldRegion] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _status: Lumbay2sv_WorldStatus? = nil
  fileprivate var _map: Lumbay2sv_WorldMap? = nil
}

public struct Lumbay2sv_WorldRegion: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var name: String = String()

  public var status: Lumbay2sv_WorldStatus {
    get {return _status ?? Lumbay2sv_WorldStatus()}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {self._status = nil}

  public var map: Lumbay2sv_WorldMap {
    get {return _map ?? Lumbay2sv_WorldMap()}
    set {_map = newValue}
  }
  /// Returns true if `map` has been explicitly set.
  public var hasMap: Bool {return self._map != nil}
  /// Clears the value of `map`. Subsequent reads from it will return its default value.
  public mutating func clearMap() {self._map = nil}

  public var objects: [Lumbay2sv_WorldObject] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _status: Lumbay2sv_WorldStatus? = nil
  fileprivate var _map: Lumbay2sv_WorldMap? = nil
}

public struct Lumbay2sv_WorldMap: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var height: Int64 = 0

  public var width: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Lumbay2sv_WorldMapLocation: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var x: Int64 = 0

  public var y: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Lumbay2sv_WorldOneObject: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Lumbay2sv_WorldObject: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var location: Lumbay2sv_WorldMapLocation {
    get {return _location ?? Lumbay2sv_WorldMapLocation()}
    set {_location = newValue}
  }
  /// Returns true if `location` has been explicitly set.
  public var hasLocation: Bool {return self._location != nil}
  /// Clears the value of `location`. Subsequent reads from it will return its default value.
  public mutating func clearLocation() {self._location = nil}

  public var type: Lumbay2sv_WorldObject.OneOf_Type? = nil

  public var worldOneObject: Lumbay2sv_WorldOneObject {
    get {
      if case .worldOneObject(let v)? = type {return v}
      return Lumbay2sv_WorldOneObject()
    }
    set {type = .worldOneObject(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Type: Equatable, Sendable {
    case worldOneObject(Lumbay2sv_WorldOneObject)

  }

  public init() {}

  fileprivate var _location: Lumbay2sv_WorldMapLocation? = nil
}

public struct Lumbay2sv_Ping: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Lumbay2sv_YouAreInGameUpdate: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Lumbay2sv_WaitingForOtherPlayerUpdate: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Lumbay2sv_ReadyToStartUpdate: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Lumbay2sv_GameCodeGeneratedUpdate: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var gameCode: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Lumbay2sv_YouQuitTheGameUpdate: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Lumbay2sv_GameStartedUpdate: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Lumbay2sv_WorldUpdate: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var world: Lumbay2sv_World {
    get {return _world ?? Lumbay2sv_World()}
    set {_world = newValue}
  }
  /// Returns true if `world` has been explicitly set.
  public var hasWorld: Bool {return self._world != nil}
  /// Clears the value of `world`. Subsequent reads from it will return its default value.
  public mutating func clearWorld() {self._world = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _world: Lumbay2sv_World? = nil
}

public struct Lumbay2sv_WorldStatusUpdate: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var worldID: String = String()

  public var status: Lumbay2sv_WorldStatus {
    get {return _status ?? Lumbay2sv_WorldStatus()}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {self._status = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _status: Lumbay2sv_WorldStatus? = nil
}

public struct Lumbay2sv_WorldRegionStatusUpdate: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var worldID: String = String()

  public var worldRegionID: String = String()

  public var status: Lumbay2sv_WorldStatus {
    get {return _status ?? Lumbay2sv_WorldStatus()}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {self._status = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _status: Lumbay2sv_WorldStatus? = nil
}

public struct Lumbay2sv_WorldObjectUpdate: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var worldID: String = String()

  public var worldRegionID: String = String()

  public var worldObject: Lumbay2sv_WorldObject {
    get {return _worldObject ?? Lumbay2sv_WorldObject()}
    set {_worldObject = newValue}
  }
  /// Returns true if `worldObject` has been explicitly set.
  public var hasWorldObject: Bool {return self._worldObject != nil}
  /// Clears the value of `worldObject`. Subsequent reads from it will return its default value.
  public mutating func clearWorldObject() {self._worldObject = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _worldObject: Lumbay2sv_WorldObject? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "lumbay2sv"

extension Lumbay2sv_GameStatus: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NONE"),
    1: .same(proto: "WAITING_FOR_OTHER_PLAYER"),
    2: .same(proto: "READY_TO_START"),
    3: .same(proto: "STARTED"),
  ]
}

extension Lumbay2sv_WorldOneStatus: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "WORLD_ONE_STATUS_NOTHING"),
    1: .same(proto: "WORLD_ONE_STATUS_PLAYER_1_TO_MOVE"),
    2: .same(proto: "WORLD_ONE_STATUS_PLAYER_2_TO_MOVE"),
    3: .same(proto: "WORLD_ONE_STATUS_PLAYER_1_WINS"),
    4: .same(proto: "WORLD_ONE_STATUS_PLAYER_2_WINS"),
    5: .same(proto: "WORLD_ONE_STATUS_DRAW"),
  ]
}

extension Lumbay2sv_Update: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Update"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sequence_number"),
    2: .same(proto: "ping"),
    3: .standard(proto: "you_are_in_game_update"),
    4: .standard(proto: "waiting_for_other_player_update"),
    5: .standard(proto: "ready_to_start_update"),
    6: .standard(proto: "game_code_generated"),
    7: .standard(proto: "you_quit_the_game_update"),
    8: .standard(proto: "game_started_update"),
    9: .standard(proto: "world_update"),
    10: .standard(proto: "world_status_update"),
    11: .standard(proto: "world_region_status_update"),
    12: .standard(proto: "world_object_update"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.sequenceNumber) }()
      case 2: try {
        var v: Lumbay2sv_Ping?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .ping(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .ping(v)
        }
      }()
      case 3: try {
        var v: Lumbay2sv_YouAreInGameUpdate?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .youAreInGameUpdate(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .youAreInGameUpdate(v)
        }
      }()
      case 4: try {
        var v: Lumbay2sv_WaitingForOtherPlayerUpdate?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .waitingForOtherPlayerUpdate(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .waitingForOtherPlayerUpdate(v)
        }
      }()
      case 5: try {
        var v: Lumbay2sv_ReadyToStartUpdate?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .readyToStartUpdate(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .readyToStartUpdate(v)
        }
      }()
      case 6: try {
        var v: Lumbay2sv_GameCodeGeneratedUpdate?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .gameCodeGenerated(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .gameCodeGenerated(v)
        }
      }()
      case 7: try {
        var v: Lumbay2sv_YouQuitTheGameUpdate?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .youQuitTheGameUpdate(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .youQuitTheGameUpdate(v)
        }
      }()
      case 8: try {
        var v: Lumbay2sv_GameStartedUpdate?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .gameStartedUpdate(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .gameStartedUpdate(v)
        }
      }()
      case 9: try {
        var v: Lumbay2sv_WorldUpdate?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .worldUpdate(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .worldUpdate(v)
        }
      }()
      case 10: try {
        var v: Lumbay2sv_WorldStatusUpdate?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .worldStatusUpdate(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .worldStatusUpdate(v)
        }
      }()
      case 11: try {
        var v: Lumbay2sv_WorldRegionStatusUpdate?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .worldRegionStatusUpdate(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .worldRegionStatusUpdate(v)
        }
      }()
      case 12: try {
        var v: Lumbay2sv_WorldObjectUpdate?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .worldObjectUpdate(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .worldObjectUpdate(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.sequenceNumber != 0 {
      try visitor.visitSingularInt64Field(value: self.sequenceNumber, fieldNumber: 1)
    }
    switch self.type {
    case .ping?: try {
      guard case .ping(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .youAreInGameUpdate?: try {
      guard case .youAreInGameUpdate(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .waitingForOtherPlayerUpdate?: try {
      guard case .waitingForOtherPlayerUpdate(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .readyToStartUpdate?: try {
      guard case .readyToStartUpdate(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .gameCodeGenerated?: try {
      guard case .gameCodeGenerated(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case .youQuitTheGameUpdate?: try {
      guard case .youQuitTheGameUpdate(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    case .gameStartedUpdate?: try {
      guard case .gameStartedUpdate(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }()
    case .worldUpdate?: try {
      guard case .worldUpdate(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }()
    case .worldStatusUpdate?: try {
      guard case .worldStatusUpdate(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }()
    case .worldRegionStatusUpdate?: try {
      guard case .worldRegionStatusUpdate(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    }()
    case .worldObjectUpdate?: try {
      guard case .worldObjectUpdate(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_Update, rhs: Lumbay2sv_Update) -> Bool {
    if lhs.sequenceNumber != rhs.sequenceNumber {return false}
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Request"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "acquire_client_id_request"),
    2: .standard(proto: "acquire_public_key_request"),
    3: .standard(proto: "create_game_request"),
    4: .standard(proto: "generate_game_code_request"),
    5: .standard(proto: "join_game_request"),
    6: .standard(proto: "quit_game_request"),
    7: .standard(proto: "start_game_request"),
    8: .standard(proto: "amend_world_object_request"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Lumbay2sv_AcquireClientIdRequest?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .acquireClientIDRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .acquireClientIDRequest(v)
        }
      }()
      case 2: try {
        var v: Lumbay2sv_AcquirePublicKeyRequest?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .acquirePublicKeyRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .acquirePublicKeyRequest(v)
        }
      }()
      case 3: try {
        var v: Lumbay2sv_CreateGameRequest?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .createGameRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .createGameRequest(v)
        }
      }()
      case 4: try {
        var v: Lumbay2sv_GenerateGameCodeRequest?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .generateGameCodeRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .generateGameCodeRequest(v)
        }
      }()
      case 5: try {
        var v: Lumbay2sv_JoinGameRequest?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .joinGameRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .joinGameRequest(v)
        }
      }()
      case 6: try {
        var v: Lumbay2sv_QuitGameRequest?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .quitGameRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .quitGameRequest(v)
        }
      }()
      case 7: try {
        var v: Lumbay2sv_StartGameRequest?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .startGameRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .startGameRequest(v)
        }
      }()
      case 8: try {
        var v: Lumbay2sv_AmendWorldObjectRequest?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .amendWorldObjectRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .amendWorldObjectRequest(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.type {
    case .acquireClientIDRequest?: try {
      guard case .acquireClientIDRequest(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .acquirePublicKeyRequest?: try {
      guard case .acquirePublicKeyRequest(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .createGameRequest?: try {
      guard case .createGameRequest(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .generateGameCodeRequest?: try {
      guard case .generateGameCodeRequest(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .joinGameRequest?: try {
      guard case .joinGameRequest(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .quitGameRequest?: try {
      guard case .quitGameRequest(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case .startGameRequest?: try {
      guard case .startGameRequest(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    case .amendWorldObjectRequest?: try {
      guard case .amendWorldObjectRequest(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_Request, rhs: Lumbay2sv_Request) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_Reply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Reply"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "acquire_client_id_reply"),
    2: .standard(proto: "acquire_public_key_reply"),
    3: .standard(proto: "create_game_reply"),
    4: .standard(proto: "generate_game_code_reply"),
    5: .standard(proto: "join_game_reply"),
    6: .standard(proto: "quit_game_reply"),
    7: .standard(proto: "start_game_reply"),
    8: .standard(proto: "amend_world_object_reply"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Lumbay2sv_AcquireClientIdReply?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .acquireClientIDReply(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .acquireClientIDReply(v)
        }
      }()
      case 2: try {
        var v: Lumbay2sv_AcquirePublicKeyReply?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .acquirePublicKeyReply(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .acquirePublicKeyReply(v)
        }
      }()
      case 3: try {
        var v: Lumbay2sv_CreateGameReply?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .createGameReply(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .createGameReply(v)
        }
      }()
      case 4: try {
        var v: Lumbay2sv_GenerateGameCodeReply?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .generateGameCodeReply(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .generateGameCodeReply(v)
        }
      }()
      case 5: try {
        var v: Lumbay2sv_JoinGameReply?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .joinGameReply(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .joinGameReply(v)
        }
      }()
      case 6: try {
        var v: Lumbay2sv_QuitGameReply?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .quitGameReply(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .quitGameReply(v)
        }
      }()
      case 7: try {
        var v: Lumbay2sv_StartGameReply?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .startGameReply(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .startGameReply(v)
        }
      }()
      case 8: try {
        var v: Lumbay2sv_AmendWorldObjectReply?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .amendWorldObjectReply(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .amendWorldObjectReply(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.type {
    case .acquireClientIDReply?: try {
      guard case .acquireClientIDReply(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .acquirePublicKeyReply?: try {
      guard case .acquirePublicKeyReply(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .createGameReply?: try {
      guard case .createGameReply(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .generateGameCodeReply?: try {
      guard case .generateGameCodeReply(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .joinGameReply?: try {
      guard case .joinGameReply(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .quitGameReply?: try {
      guard case .quitGameReply(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case .startGameReply?: try {
      guard case .startGameReply(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    case .amendWorldObjectReply?: try {
      guard case .amendWorldObjectReply(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_Reply, rhs: Lumbay2sv_Reply) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_WorldStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WorldStatus"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "world_one_status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Lumbay2sv_WorldOneStatus?
        try decoder.decodeSingularEnumField(value: &v)
        if let v = v {
          if self.type != nil {try decoder.handleConflictingOneOf()}
          self.type = .worldOneStatus(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if case .worldOneStatus(let v)? = self.type {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_WorldStatus, rhs: Lumbay2sv_WorldStatus) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_Empty: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Empty"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_Empty, rhs: Lumbay2sv_Empty) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_AcquireClientIdRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AcquireClientIdRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_AcquireClientIdRequest, rhs: Lumbay2sv_AcquireClientIdRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_AcquirePublicKeyRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AcquirePublicKeyRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_AcquirePublicKeyRequest, rhs: Lumbay2sv_AcquirePublicKeyRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_AcquireClientIdReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AcquireClientIdReply"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "client_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.clientID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.clientID.isEmpty {
      try visitor.visitSingularStringField(value: self.clientID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_AcquireClientIdReply, rhs: Lumbay2sv_AcquireClientIdReply) -> Bool {
    if lhs.clientID != rhs.clientID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_AcquirePublicKeyReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AcquirePublicKeyReply"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "public_key"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.publicKey) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.publicKey.isEmpty {
      try visitor.visitSingularStringField(value: self.publicKey, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_AcquirePublicKeyReply, rhs: Lumbay2sv_AcquirePublicKeyReply) -> Bool {
    if lhs.publicKey != rhs.publicKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_CreateGameRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateGameRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_CreateGameRequest, rhs: Lumbay2sv_CreateGameRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_CreateGameReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateGameReply"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_CreateGameReply, rhs: Lumbay2sv_CreateGameReply) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_GenerateGameCodeRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GenerateGameCodeRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_GenerateGameCodeRequest, rhs: Lumbay2sv_GenerateGameCodeRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_GenerateGameCodeReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GenerateGameCodeReply"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_GenerateGameCodeReply, rhs: Lumbay2sv_GenerateGameCodeReply) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_JoinGameRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".JoinGameRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "gameCode"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.gameCode) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.gameCode.isEmpty {
      try visitor.visitSingularStringField(value: self.gameCode, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_JoinGameRequest, rhs: Lumbay2sv_JoinGameRequest) -> Bool {
    if lhs.gameCode != rhs.gameCode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_JoinGameReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".JoinGameReply"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_JoinGameReply, rhs: Lumbay2sv_JoinGameReply) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_QuitGameRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".QuitGameRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_QuitGameRequest, rhs: Lumbay2sv_QuitGameRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_QuitGameReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".QuitGameReply"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_QuitGameReply, rhs: Lumbay2sv_QuitGameReply) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_StartGameRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StartGameRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_StartGameRequest, rhs: Lumbay2sv_StartGameRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_StartGameReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StartGameReply"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_StartGameReply, rhs: Lumbay2sv_StartGameReply) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_AmendWorldObjectRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AmendWorldObjectRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "world_id"),
    2: .standard(proto: "world_region_id"),
    3: .standard(proto: "world_object"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.worldID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.worldRegionID) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._worldObject) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.worldID.isEmpty {
      try visitor.visitSingularStringField(value: self.worldID, fieldNumber: 1)
    }
    if !self.worldRegionID.isEmpty {
      try visitor.visitSingularStringField(value: self.worldRegionID, fieldNumber: 2)
    }
    try { if let v = self._worldObject {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_AmendWorldObjectRequest, rhs: Lumbay2sv_AmendWorldObjectRequest) -> Bool {
    if lhs.worldID != rhs.worldID {return false}
    if lhs.worldRegionID != rhs.worldRegionID {return false}
    if lhs._worldObject != rhs._worldObject {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_AmendWorldObjectReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AmendWorldObjectReply"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_AmendWorldObjectReply, rhs: Lumbay2sv_AmendWorldObjectReply) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_Game: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Game"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "player1"),
    3: .same(proto: "player2"),
    4: .same(proto: "status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.player1) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.player2) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.player1.isEmpty {
      try visitor.visitSingularStringField(value: self.player1, fieldNumber: 2)
    }
    if !self.player2.isEmpty {
      try visitor.visitSingularStringField(value: self.player2, fieldNumber: 3)
    }
    if self.status != .none {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_Game, rhs: Lumbay2sv_Game) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.player1 != rhs.player1 {return false}
    if lhs.player2 != rhs.player2 {return false}
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_Client: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Client"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "salt"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.salt) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.salt.isEmpty {
      try visitor.visitSingularStringField(value: self.salt, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_Client, rhs: Lumbay2sv_Client) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.salt != rhs.salt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_World: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".World"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "status"),
    4: .same(proto: "map"),
    5: .same(proto: "region"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._status) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._map) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.region) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    try { if let v = self._status {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._map {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    if !self.region.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.region, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_World, rhs: Lumbay2sv_World) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs._status != rhs._status {return false}
    if lhs._map != rhs._map {return false}
    if lhs.region != rhs.region {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_WorldRegion: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WorldRegion"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "status"),
    4: .same(proto: "map"),
    5: .same(proto: "objects"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._status) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._map) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.objects) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    try { if let v = self._status {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._map {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    if !self.objects.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.objects, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_WorldRegion, rhs: Lumbay2sv_WorldRegion) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs._status != rhs._status {return false}
    if lhs._map != rhs._map {return false}
    if lhs.objects != rhs.objects {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_WorldMap: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WorldMap"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "height"),
    3: .same(proto: "width"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.height) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.width) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if self.height != 0 {
      try visitor.visitSingularInt64Field(value: self.height, fieldNumber: 2)
    }
    if self.width != 0 {
      try visitor.visitSingularInt64Field(value: self.width, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_WorldMap, rhs: Lumbay2sv_WorldMap) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.height != rhs.height {return false}
    if lhs.width != rhs.width {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_WorldMapLocation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WorldMapLocation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "x"),
    2: .same(proto: "y"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.x) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.y) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.x != 0 {
      try visitor.visitSingularInt64Field(value: self.x, fieldNumber: 1)
    }
    if self.y != 0 {
      try visitor.visitSingularInt64Field(value: self.y, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_WorldMapLocation, rhs: Lumbay2sv_WorldMapLocation) -> Bool {
    if lhs.x != rhs.x {return false}
    if lhs.y != rhs.y {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_WorldOneObject: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WorldOneObject"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_WorldOneObject, rhs: Lumbay2sv_WorldOneObject) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_WorldObject: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WorldObject"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "location"),
    2: .standard(proto: "world_one_object"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._location) }()
      case 2: try {
        var v: Lumbay2sv_WorldOneObject?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .worldOneObject(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .worldOneObject(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._location {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if case .worldOneObject(let v)? = self.type {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_WorldObject, rhs: Lumbay2sv_WorldObject) -> Bool {
    if lhs._location != rhs._location {return false}
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_Ping: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Ping"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_Ping, rhs: Lumbay2sv_Ping) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_YouAreInGameUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".YouAreInGameUpdate"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_YouAreInGameUpdate, rhs: Lumbay2sv_YouAreInGameUpdate) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_WaitingForOtherPlayerUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WaitingForOtherPlayerUpdate"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_WaitingForOtherPlayerUpdate, rhs: Lumbay2sv_WaitingForOtherPlayerUpdate) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_ReadyToStartUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ReadyToStartUpdate"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_ReadyToStartUpdate, rhs: Lumbay2sv_ReadyToStartUpdate) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_GameCodeGeneratedUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GameCodeGeneratedUpdate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "game_code"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.gameCode) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.gameCode.isEmpty {
      try visitor.visitSingularStringField(value: self.gameCode, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_GameCodeGeneratedUpdate, rhs: Lumbay2sv_GameCodeGeneratedUpdate) -> Bool {
    if lhs.gameCode != rhs.gameCode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_YouQuitTheGameUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".YouQuitTheGameUpdate"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_YouQuitTheGameUpdate, rhs: Lumbay2sv_YouQuitTheGameUpdate) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_GameStartedUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GameStartedUpdate"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_GameStartedUpdate, rhs: Lumbay2sv_GameStartedUpdate) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_WorldUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WorldUpdate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "world"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._world) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._world {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_WorldUpdate, rhs: Lumbay2sv_WorldUpdate) -> Bool {
    if lhs._world != rhs._world {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_WorldStatusUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WorldStatusUpdate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "world_id"),
    2: .same(proto: "status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.worldID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._status) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.worldID.isEmpty {
      try visitor.visitSingularStringField(value: self.worldID, fieldNumber: 1)
    }
    try { if let v = self._status {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_WorldStatusUpdate, rhs: Lumbay2sv_WorldStatusUpdate) -> Bool {
    if lhs.worldID != rhs.worldID {return false}
    if lhs._status != rhs._status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_WorldRegionStatusUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WorldRegionStatusUpdate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "world_id"),
    2: .standard(proto: "world_region_id"),
    3: .same(proto: "status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.worldID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.worldRegionID) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._status) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.worldID.isEmpty {
      try visitor.visitSingularStringField(value: self.worldID, fieldNumber: 1)
    }
    if !self.worldRegionID.isEmpty {
      try visitor.visitSingularStringField(value: self.worldRegionID, fieldNumber: 2)
    }
    try { if let v = self._status {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_WorldRegionStatusUpdate, rhs: Lumbay2sv_WorldRegionStatusUpdate) -> Bool {
    if lhs.worldID != rhs.worldID {return false}
    if lhs.worldRegionID != rhs.worldRegionID {return false}
    if lhs._status != rhs._status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_WorldObjectUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WorldObjectUpdate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "world_id"),
    2: .standard(proto: "world_region_id"),
    3: .standard(proto: "world_object"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.worldID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.worldRegionID) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._worldObject) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.worldID.isEmpty {
      try visitor.visitSingularStringField(value: self.worldID, fieldNumber: 1)
    }
    if !self.worldRegionID.isEmpty {
      try visitor.visitSingularStringField(value: self.worldRegionID, fieldNumber: 2)
    }
    try { if let v = self._worldObject {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_WorldObjectUpdate, rhs: Lumbay2sv_WorldObjectUpdate) -> Bool {
    if lhs.worldID != rhs.worldID {return false}
    if lhs.worldRegionID != rhs.worldRegionID {return false}
    if lhs._worldObject != rhs._worldObject {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
