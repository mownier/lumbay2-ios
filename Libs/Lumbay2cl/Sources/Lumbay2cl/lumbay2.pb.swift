// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Libs/Lumbay2cl/Sources/Lumbay2cl/lumbay2.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Lumbay2sv_GameStatus: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case none // = 0
  case waitingForOtherPlayer // = 1
  case readyToStart // = 2
  case started // = 3
  case otherPlayerNotYetReady // = 4
  case UNRECOGNIZED(Int)

  public init() {
    self = .none
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .none
    case 1: self = .waitingForOtherPlayer
    case 2: self = .readyToStart
    case 3: self = .started
    case 4: self = .otherPlayerNotYetReady
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .none: return 0
    case .waitingForOtherPlayer: return 1
    case .readyToStart: return 2
    case .started: return 3
    case .otherPlayerNotYetReady: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Lumbay2sv_GameStatus] = [
    .none,
    .waitingForOtherPlayer,
    .readyToStart,
    .started,
    .otherPlayerNotYetReady,
  ]

}

public enum Lumbay2sv_WorldId: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case none // = 0
  case one // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .none
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .none
    case 1: self = .one
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .none: return 0
    case .one: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Lumbay2sv_WorldId] = [
    .none,
    .one,
  ]

}

public enum Lumbay2sv_WorldOneStatus: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case none // = 0
  case yourTurnToMove // = 1
  case waitForYourTurn // = 2
  case youWin // = 3
  case youLose // = 4
  case youWinByOutOfMoves // = 5
  case youLoseByOutOfMoves // = 6
  case playerOneWins // = 7
  case playerTwoWins // = 8
  case playerOneWinsByOutOfMoves // = 9
  case playerTwoWinsByOutOfMoves // = 10
  case playerOneMoved // = 11
  case playerTwoMoved // = 12
  case playerOneConfirmsRestart // = 13
  case playerTwoConfirmsRestart // = 14
  case restarted // = 15
  case playerOneExited // = 16
  case playerTwoExited // = 17
  case abandoned // = 18
  case UNRECOGNIZED(Int)

  public init() {
    self = .none
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .none
    case 1: self = .yourTurnToMove
    case 2: self = .waitForYourTurn
    case 3: self = .youWin
    case 4: self = .youLose
    case 5: self = .youWinByOutOfMoves
    case 6: self = .youLoseByOutOfMoves
    case 7: self = .playerOneWins
    case 8: self = .playerTwoWins
    case 9: self = .playerOneWinsByOutOfMoves
    case 10: self = .playerTwoWinsByOutOfMoves
    case 11: self = .playerOneMoved
    case 12: self = .playerTwoMoved
    case 13: self = .playerOneConfirmsRestart
    case 14: self = .playerTwoConfirmsRestart
    case 15: self = .restarted
    case 16: self = .playerOneExited
    case 17: self = .playerTwoExited
    case 18: self = .abandoned
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .none: return 0
    case .yourTurnToMove: return 1
    case .waitForYourTurn: return 2
    case .youWin: return 3
    case .youLose: return 4
    case .youWinByOutOfMoves: return 5
    case .youLoseByOutOfMoves: return 6
    case .playerOneWins: return 7
    case .playerTwoWins: return 8
    case .playerOneWinsByOutOfMoves: return 9
    case .playerTwoWinsByOutOfMoves: return 10
    case .playerOneMoved: return 11
    case .playerTwoMoved: return 12
    case .playerOneConfirmsRestart: return 13
    case .playerTwoConfirmsRestart: return 14
    case .restarted: return 15
    case .playerOneExited: return 16
    case .playerTwoExited: return 17
    case .abandoned: return 18
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Lumbay2sv_WorldOneStatus] = [
    .none,
    .yourTurnToMove,
    .waitForYourTurn,
    .youWin,
    .youLose,
    .youWinByOutOfMoves,
    .youLoseByOutOfMoves,
    .playerOneWins,
    .playerTwoWins,
    .playerOneWinsByOutOfMoves,
    .playerTwoWinsByOutOfMoves,
    .playerOneMoved,
    .playerTwoMoved,
    .playerOneConfirmsRestart,
    .playerTwoConfirmsRestart,
    .restarted,
    .playerOneExited,
    .playerTwoExited,
    .abandoned,
  ]

}

public enum Lumbay2sv_WorldOneRegionId: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case none // = 0
  case one // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .none
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .none
    case 1: self = .one
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .none: return 0
    case .one: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Lumbay2sv_WorldOneRegionId] = [
    .none,
    .one,
  ]

}

public enum Lumbay2sv_WorldOneObjectId: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case none // = 0
  case playerOneStoneOne // = 1
  case playerOneStoneTwo // = 2
  case playerOneStoneThree // = 3
  case playerTwoStoneOne // = 4
  case playerTwoStoneTwo // = 5
  case playerTwoStoneThree // = 6
  case stonePlayerOne // = 7
  case stonePlayerTwo // = 8
  case UNRECOGNIZED(Int)

  public init() {
    self = .none
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .none
    case 1: self = .playerOneStoneOne
    case 2: self = .playerOneStoneTwo
    case 3: self = .playerOneStoneThree
    case 4: self = .playerTwoStoneOne
    case 5: self = .playerTwoStoneTwo
    case 6: self = .playerTwoStoneThree
    case 7: self = .stonePlayerOne
    case 8: self = .stonePlayerTwo
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .none: return 0
    case .playerOneStoneOne: return 1
    case .playerOneStoneTwo: return 2
    case .playerOneStoneThree: return 3
    case .playerTwoStoneOne: return 4
    case .playerTwoStoneTwo: return 5
    case .playerTwoStoneThree: return 6
    case .stonePlayerOne: return 7
    case .stonePlayerTwo: return 8
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Lumbay2sv_WorldOneObjectId] = [
    .none,
    .playerOneStoneOne,
    .playerOneStoneTwo,
    .playerOneStoneThree,
    .playerTwoStoneOne,
    .playerTwoStoneTwo,
    .playerTwoStoneThree,
    .stonePlayerOne,
    .stonePlayerTwo,
  ]

}

public enum Lumbay2sv_WorldOneObjectStatus: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case none // = 0
  case spawned // = 1
  case moved // = 2
  case assigned // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .none
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .none
    case 1: self = .spawned
    case 2: self = .moved
    case 3: self = .assigned
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .none: return 0
    case .spawned: return 1
    case .moved: return 2
    case .assigned: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Lumbay2sv_WorldOneObjectStatus] = [
    .none,
    .spawned,
    .moved,
    .assigned,
  ]

}

public struct Lumbay2sv_Update: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var sequenceNumber: Int64 = 0

  public var type: Lumbay2sv_Update.OneOf_Type? = nil

  public var ping: Lumbay2sv_Ping {
    get {
      if case .ping(let v)? = type {return v}
      return Lumbay2sv_Ping()
    }
    set {type = .ping(newValue)}
  }

  public var youAreInGameUpdate: Lumbay2sv_YouAreInGameUpdate {
    get {
      if case .youAreInGameUpdate(let v)? = type {return v}
      return Lumbay2sv_YouAreInGameUpdate()
    }
    set {type = .youAreInGameUpdate(newValue)}
  }

  public var waitingForOtherPlayerUpdate: Lumbay2sv_WaitingForOtherPlayerUpdate {
    get {
      if case .waitingForOtherPlayerUpdate(let v)? = type {return v}
      return Lumbay2sv_WaitingForOtherPlayerUpdate()
    }
    set {type = .waitingForOtherPlayerUpdate(newValue)}
  }

  public var readyToStartUpdate: Lumbay2sv_ReadyToStartUpdate {
    get {
      if case .readyToStartUpdate(let v)? = type {return v}
      return Lumbay2sv_ReadyToStartUpdate()
    }
    set {type = .readyToStartUpdate(newValue)}
  }

  public var gameCodeGenerated: Lumbay2sv_GameCodeGeneratedUpdate {
    get {
      if case .gameCodeGenerated(let v)? = type {return v}
      return Lumbay2sv_GameCodeGeneratedUpdate()
    }
    set {type = .gameCodeGenerated(newValue)}
  }

  public var youQuitTheGameUpdate: Lumbay2sv_YouQuitTheGameUpdate {
    get {
      if case .youQuitTheGameUpdate(let v)? = type {return v}
      return Lumbay2sv_YouQuitTheGameUpdate()
    }
    set {type = .youQuitTheGameUpdate(newValue)}
  }

  public var gameStartedUpdate: Lumbay2sv_GameStartedUpdate {
    get {
      if case .gameStartedUpdate(let v)? = type {return v}
      return Lumbay2sv_GameStartedUpdate()
    }
    set {type = .gameStartedUpdate(newValue)}
  }

  public var worldOneRegionUpdate: Lumbay2sv_WorldOneRegionUpdate {
    get {
      if case .worldOneRegionUpdate(let v)? = type {return v}
      return Lumbay2sv_WorldOneRegionUpdate()
    }
    set {type = .worldOneRegionUpdate(newValue)}
  }

  public var worldOneStatusUpdate: Lumbay2sv_WorldOneStatusUpdate {
    get {
      if case .worldOneStatusUpdate(let v)? = type {return v}
      return Lumbay2sv_WorldOneStatusUpdate()
    }
    set {type = .worldOneStatusUpdate(newValue)}
  }

  public var worldOneObjectUpdate: Lumbay2sv_WorldOneObjectUpdate {
    get {
      if case .worldOneObjectUpdate(let v)? = type {return v}
      return Lumbay2sv_WorldOneObjectUpdate()
    }
    set {type = .worldOneObjectUpdate(newValue)}
  }

  public var youConfirmForRestartUpdate: Lumbay2sv_YouConfirmForRestartUpdate {
    get {
      if case .youConfirmForRestartUpdate(let v)? = type {return v}
      return Lumbay2sv_YouConfirmForRestartUpdate()
    }
    set {type = .youConfirmForRestartUpdate(newValue)}
  }

  public var otherConfirmsForRestartUpdate: Lumbay2sv_OtherConfirmsForRestartUpdate {
    get {
      if case .otherConfirmsForRestartUpdate(let v)? = type {return v}
      return Lumbay2sv_OtherConfirmsForRestartUpdate()
    }
    set {type = .otherConfirmsForRestartUpdate(newValue)}
  }

  public var youExitWorldUpdate: Lumbay2sv_YouExitWorldUpdate {
    get {
      if case .youExitWorldUpdate(let v)? = type {return v}
      return Lumbay2sv_YouExitWorldUpdate()
    }
    set {type = .youExitWorldUpdate(newValue)}
  }

  public var otherExitsWorldUpdate: Lumbay2sv_OtherExitsWorldUpdate {
    get {
      if case .otherExitsWorldUpdate(let v)? = type {return v}
      return Lumbay2sv_OtherExitsWorldUpdate()
    }
    set {type = .otherExitsWorldUpdate(newValue)}
  }

  public var otherPlayerNotYetReadyUpdate: Lumbay2sv_OtherPlayerNotYetReadyUpdate {
    get {
      if case .otherPlayerNotYetReadyUpdate(let v)? = type {return v}
      return Lumbay2sv_OtherPlayerNotYetReadyUpdate()
    }
    set {type = .otherPlayerNotYetReadyUpdate(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Type: Equatable, Sendable {
    case ping(Lumbay2sv_Ping)
    case youAreInGameUpdate(Lumbay2sv_YouAreInGameUpdate)
    case waitingForOtherPlayerUpdate(Lumbay2sv_WaitingForOtherPlayerUpdate)
    case readyToStartUpdate(Lumbay2sv_ReadyToStartUpdate)
    case gameCodeGenerated(Lumbay2sv_GameCodeGeneratedUpdate)
    case youQuitTheGameUpdate(Lumbay2sv_YouQuitTheGameUpdate)
    case gameStartedUpdate(Lumbay2sv_GameStartedUpdate)
    case worldOneRegionUpdate(Lumbay2sv_WorldOneRegionUpdate)
    case worldOneStatusUpdate(Lumbay2sv_WorldOneStatusUpdate)
    case worldOneObjectUpdate(Lumbay2sv_WorldOneObjectUpdate)
    case youConfirmForRestartUpdate(Lumbay2sv_YouConfirmForRestartUpdate)
    case otherConfirmsForRestartUpdate(Lumbay2sv_OtherConfirmsForRestartUpdate)
    case youExitWorldUpdate(Lumbay2sv_YouExitWorldUpdate)
    case otherExitsWorldUpdate(Lumbay2sv_OtherExitsWorldUpdate)
    case otherPlayerNotYetReadyUpdate(Lumbay2sv_OtherPlayerNotYetReadyUpdate)

  }

  public init() {}
}

public struct Lumbay2sv_Request: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var type: Lumbay2sv_Request.OneOf_Type? = nil

  public var acquireClientIDRequest: Lumbay2sv_AcquireClientIdRequest {
    get {
      if case .acquireClientIDRequest(let v)? = type {return v}
      return Lumbay2sv_AcquireClientIdRequest()
    }
    set {type = .acquireClientIDRequest(newValue)}
  }

  public var acquirePublicKeyRequest: Lumbay2sv_AcquirePublicKeyRequest {
    get {
      if case .acquirePublicKeyRequest(let v)? = type {return v}
      return Lumbay2sv_AcquirePublicKeyRequest()
    }
    set {type = .acquirePublicKeyRequest(newValue)}
  }

  public var createGameRequest: Lumbay2sv_CreateGameRequest {
    get {
      if case .createGameRequest(let v)? = type {return v}
      return Lumbay2sv_CreateGameRequest()
    }
    set {type = .createGameRequest(newValue)}
  }

  public var generateGameCodeRequest: Lumbay2sv_GenerateGameCodeRequest {
    get {
      if case .generateGameCodeRequest(let v)? = type {return v}
      return Lumbay2sv_GenerateGameCodeRequest()
    }
    set {type = .generateGameCodeRequest(newValue)}
  }

  public var joinGameRequest: Lumbay2sv_JoinGameRequest {
    get {
      if case .joinGameRequest(let v)? = type {return v}
      return Lumbay2sv_JoinGameRequest()
    }
    set {type = .joinGameRequest(newValue)}
  }

  public var quitGameRequest: Lumbay2sv_QuitGameRequest {
    get {
      if case .quitGameRequest(let v)? = type {return v}
      return Lumbay2sv_QuitGameRequest()
    }
    set {type = .quitGameRequest(newValue)}
  }

  public var startGameRequest: Lumbay2sv_StartGameRequest {
    get {
      if case .startGameRequest(let v)? = type {return v}
      return Lumbay2sv_StartGameRequest()
    }
    set {type = .startGameRequest(newValue)}
  }

  public var processWorldOneObjectRequest: Lumbay2sv_ProcessWorldOneObjectRequest {
    get {
      if case .processWorldOneObjectRequest(let v)? = type {return v}
      return Lumbay2sv_ProcessWorldOneObjectRequest()
    }
    set {type = .processWorldOneObjectRequest(newValue)}
  }

  public var restartWorldRequest: Lumbay2sv_RestartWorldRequest {
    get {
      if case .restartWorldRequest(let v)? = type {return v}
      return Lumbay2sv_RestartWorldRequest()
    }
    set {type = .restartWorldRequest(newValue)}
  }

  public var exitWorldRequest: Lumbay2sv_ExitWorldRequest {
    get {
      if case .exitWorldRequest(let v)? = type {return v}
      return Lumbay2sv_ExitWorldRequest()
    }
    set {type = .exitWorldRequest(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Type: Equatable, Sendable {
    case acquireClientIDRequest(Lumbay2sv_AcquireClientIdRequest)
    case acquirePublicKeyRequest(Lumbay2sv_AcquirePublicKeyRequest)
    case createGameRequest(Lumbay2sv_CreateGameRequest)
    case generateGameCodeRequest(Lumbay2sv_GenerateGameCodeRequest)
    case joinGameRequest(Lumbay2sv_JoinGameRequest)
    case quitGameRequest(Lumbay2sv_QuitGameRequest)
    case startGameRequest(Lumbay2sv_StartGameRequest)
    case processWorldOneObjectRequest(Lumbay2sv_ProcessWorldOneObjectRequest)
    case restartWorldRequest(Lumbay2sv_RestartWorldRequest)
    case exitWorldRequest(Lumbay2sv_ExitWorldRequest)

  }

  public init() {}
}

public struct Lumbay2sv_Reply: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var type: Lumbay2sv_Reply.OneOf_Type? = nil

  public var acquireClientIDReply: Lumbay2sv_AcquireClientIdReply {
    get {
      if case .acquireClientIDReply(let v)? = type {return v}
      return Lumbay2sv_AcquireClientIdReply()
    }
    set {type = .acquireClientIDReply(newValue)}
  }

  public var acquirePublicKeyReply: Lumbay2sv_AcquirePublicKeyReply {
    get {
      if case .acquirePublicKeyReply(let v)? = type {return v}
      return Lumbay2sv_AcquirePublicKeyReply()
    }
    set {type = .acquirePublicKeyReply(newValue)}
  }

  public var createGameReply: Lumbay2sv_CreateGameReply {
    get {
      if case .createGameReply(let v)? = type {return v}
      return Lumbay2sv_CreateGameReply()
    }
    set {type = .createGameReply(newValue)}
  }

  public var generateGameCodeReply: Lumbay2sv_GenerateGameCodeReply {
    get {
      if case .generateGameCodeReply(let v)? = type {return v}
      return Lumbay2sv_GenerateGameCodeReply()
    }
    set {type = .generateGameCodeReply(newValue)}
  }

  public var joinGameReply: Lumbay2sv_JoinGameReply {
    get {
      if case .joinGameReply(let v)? = type {return v}
      return Lumbay2sv_JoinGameReply()
    }
    set {type = .joinGameReply(newValue)}
  }

  public var quitGameReply: Lumbay2sv_QuitGameReply {
    get {
      if case .quitGameReply(let v)? = type {return v}
      return Lumbay2sv_QuitGameReply()
    }
    set {type = .quitGameReply(newValue)}
  }

  public var startGameReply: Lumbay2sv_StartGameReply {
    get {
      if case .startGameReply(let v)? = type {return v}
      return Lumbay2sv_StartGameReply()
    }
    set {type = .startGameReply(newValue)}
  }

  public var processWorldOneObjectReply: Lumbay2sv_ProcessWorldOneObjectReply {
    get {
      if case .processWorldOneObjectReply(let v)? = type {return v}
      return Lumbay2sv_ProcessWorldOneObjectReply()
    }
    set {type = .processWorldOneObjectReply(newValue)}
  }

  public var restartWorldReply: Lumbay2sv_RestartWorldReply {
    get {
      if case .restartWorldReply(let v)? = type {return v}
      return Lumbay2sv_RestartWorldReply()
    }
    set {type = .restartWorldReply(newValue)}
  }

  public var exitWorldReply: Lumbay2sv_ExitWorldReply {
    get {
      if case .exitWorldReply(let v)? = type {return v}
      return Lumbay2sv_ExitWorldReply()
    }
    set {type = .exitWorldReply(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Type: Equatable, Sendable {
    case acquireClientIDReply(Lumbay2sv_AcquireClientIdReply)
    case acquirePublicKeyReply(Lumbay2sv_AcquirePublicKeyReply)
    case createGameReply(Lumbay2sv_CreateGameReply)
    case generateGameCodeReply(Lumbay2sv_GenerateGameCodeReply)
    case joinGameReply(Lumbay2sv_JoinGameReply)
    case quitGameReply(Lumbay2sv_QuitGameReply)
    case startGameReply(Lumbay2sv_StartGameReply)
    case processWorldOneObjectReply(Lumbay2sv_ProcessWorldOneObjectReply)
    case restartWorldReply(Lumbay2sv_RestartWorldReply)
    case exitWorldReply(Lumbay2sv_ExitWorldReply)

  }

  public init() {}
}

public struct Lumbay2sv_Empty: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Lumbay2sv_AcquireClientIdRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Lumbay2sv_AcquirePublicKeyRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Lumbay2sv_AcquireClientIdReply: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var clientID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Lumbay2sv_AcquirePublicKeyReply: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var publicKey: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Lumbay2sv_CreateGameRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Lumbay2sv_CreateGameReply: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Lumbay2sv_GenerateGameCodeRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Lumbay2sv_GenerateGameCodeReply: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Lumbay2sv_JoinGameRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var gameCode: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Lumbay2sv_JoinGameReply: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Lumbay2sv_QuitGameRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Lumbay2sv_QuitGameReply: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Lumbay2sv_StartGameRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Lumbay2sv_StartGameReply: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Lumbay2sv_RestartWorldRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Lumbay2sv_RestartWorldReply: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Lumbay2sv_ExitWorldRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Lumbay2sv_ExitWorldReply: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Lumbay2sv_Game: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var player1: String = String()

  public var player2: String = String()

  public var status: Lumbay2sv_GameStatus = .none

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Lumbay2sv_Client: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var salt: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Lumbay2sv_Ping: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Lumbay2sv_YouAreInGameUpdate: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Lumbay2sv_WaitingForOtherPlayerUpdate: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Lumbay2sv_ReadyToStartUpdate: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Lumbay2sv_GameCodeGeneratedUpdate: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var gameCode: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Lumbay2sv_YouQuitTheGameUpdate: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Lumbay2sv_GameStartedUpdate: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Lumbay2sv_YouConfirmForRestartUpdate: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Lumbay2sv_OtherConfirmsForRestartUpdate: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Lumbay2sv_YouExitWorldUpdate: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Lumbay2sv_OtherExitsWorldUpdate: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Lumbay2sv_OtherPlayerNotYetReadyUpdate: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Lumbay2sv_World: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var dbID: String = String()

  public var id: Lumbay2sv_WorldId = .none

  public var type: Lumbay2sv_World.OneOf_Type? = nil

  public var worldOne: Lumbay2sv_WorldOne {
    get {
      if case .worldOne(let v)? = type {return v}
      return Lumbay2sv_WorldOne()
    }
    set {type = .worldOne(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Type: Equatable, Sendable {
    case worldOne(Lumbay2sv_WorldOne)

  }

  public init() {}
}

public struct Lumbay2sv_WorldOne: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Lumbay2sv_WorldOneStatus = .none

  public var region: Lumbay2sv_WorldOneRegion {
    get {return _region ?? Lumbay2sv_WorldOneRegion()}
    set {_region = newValue}
  }
  /// Returns true if `region` has been explicitly set.
  public var hasRegion: Bool {return self._region != nil}
  /// Clears the value of `region`. Subsequent reads from it will return its default value.
  public mutating func clearRegion() {self._region = nil}

  public var regions: [Lumbay2sv_WorldOneRegion] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _region: Lumbay2sv_WorldOneRegion? = nil
}

public struct Lumbay2sv_WorldOneRegion: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: Lumbay2sv_WorldOneRegionId = .none

  public var objects: [Lumbay2sv_WorldOneObject] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Lumbay2sv_WorldOneObject: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: Lumbay2sv_WorldOneObjectId = .none

  public var data: Lumbay2sv_WorldOneObjectData {
    get {return _data ?? Lumbay2sv_WorldOneObjectData()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {self._data = nil}

  public var status: Lumbay2sv_WorldOneObjectStatus = .none

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _data: Lumbay2sv_WorldOneObjectData? = nil
}

public struct Lumbay2sv_WorldOneObjectData: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var type: Lumbay2sv_WorldOneObjectData.OneOf_Type? = nil

  public var location: Lumbay2sv_WorldLocation {
    get {
      if case .location(let v)? = type {return v}
      return Lumbay2sv_WorldLocation()
    }
    set {type = .location(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Type: Equatable, Sendable {
    case location(Lumbay2sv_WorldLocation)

  }

  public init() {}
}

public struct Lumbay2sv_WorldLocation: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var x: Int64 = 0

  public var y: Int64 = 0

  public var z: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Lumbay2sv_WorldOneRegionUpdate: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var regionID: Lumbay2sv_WorldOneRegionId = .none

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Lumbay2sv_WorldOneStatusUpdate: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var regionID: Lumbay2sv_WorldOneRegionId = .none

  public var status: Lumbay2sv_WorldOneStatus = .none

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Lumbay2sv_WorldOneObjectUpdate: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var regionID: Lumbay2sv_WorldOneRegionId = .none

  public var objectID: Lumbay2sv_WorldOneObjectId = .none

  public var objectStatus: Lumbay2sv_WorldOneObjectStatus = .none

  public var objectData: Lumbay2sv_WorldOneObjectData {
    get {return _objectData ?? Lumbay2sv_WorldOneObjectData()}
    set {_objectData = newValue}
  }
  /// Returns true if `objectData` has been explicitly set.
  public var hasObjectData: Bool {return self._objectData != nil}
  /// Clears the value of `objectData`. Subsequent reads from it will return its default value.
  public mutating func clearObjectData() {self._objectData = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _objectData: Lumbay2sv_WorldOneObjectData? = nil
}

public struct Lumbay2sv_ProcessWorldOneObjectRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var regionID: Lumbay2sv_WorldOneRegionId = .none

  public var objectID: Lumbay2sv_WorldOneObjectId = .none

  public var objectStatus: Lumbay2sv_WorldOneObjectStatus = .none

  public var objectData: Lumbay2sv_WorldOneObjectData {
    get {return _objectData ?? Lumbay2sv_WorldOneObjectData()}
    set {_objectData = newValue}
  }
  /// Returns true if `objectData` has been explicitly set.
  public var hasObjectData: Bool {return self._objectData != nil}
  /// Clears the value of `objectData`. Subsequent reads from it will return its default value.
  public mutating func clearObjectData() {self._objectData = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _objectData: Lumbay2sv_WorldOneObjectData? = nil
}

public struct Lumbay2sv_ProcessWorldOneObjectReply: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "lumbay2sv"

extension Lumbay2sv_GameStatus: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NONE"),
    1: .same(proto: "WAITING_FOR_OTHER_PLAYER"),
    2: .same(proto: "READY_TO_START"),
    3: .same(proto: "STARTED"),
    4: .same(proto: "OTHER_PLAYER_NOT_YET_READY"),
  ]
}

extension Lumbay2sv_WorldId: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "WORLD_ID_NONE"),
    1: .same(proto: "WORLD_ID_ONE"),
  ]
}

extension Lumbay2sv_WorldOneStatus: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "WORLD_ONE_STATUS_NONE"),
    1: .same(proto: "WORLD_ONE_STATUS_YOUR_TURN_TO_MOVE"),
    2: .same(proto: "WORLD_ONE_STATUS_WAIT_FOR_YOUR_TURN"),
    3: .same(proto: "WORLD_ONE_STATUS_YOU_WIN"),
    4: .same(proto: "WORLD_ONE_STATUS_YOU_LOSE"),
    5: .same(proto: "WORLD_ONE_STATUS_YOU_WIN_BY_OUT_OF_MOVES"),
    6: .same(proto: "WORLD_ONE_STATUS_YOU_LOSE_BY_OUT_OF_MOVES"),
    7: .same(proto: "WORLD_ONE_STATUS_PLAYER_ONE_WINS"),
    8: .same(proto: "WORLD_ONE_STATUS_PLAYER_TWO_WINS"),
    9: .same(proto: "WORLD_ONE_STATUS_PLAYER_ONE_WINS_BY_OUT_OF_MOVES"),
    10: .same(proto: "WORLD_ONE_STATUS_PLAYER_TWO_WINS_BY_OUT_OF_MOVES"),
    11: .same(proto: "WORLD_ONE_STATUS_PLAYER_ONE_MOVED"),
    12: .same(proto: "WORLD_ONE_STATUS_PLAYER_TWO_MOVED"),
    13: .same(proto: "WORLD_ONE_STATUS_PLAYER_ONE_CONFIRMS_RESTART"),
    14: .same(proto: "WORLD_ONE_STATUS_PLAYER_TWO_CONFIRMS_RESTART"),
    15: .same(proto: "WORLD_ONE_STATUS_RESTARTED"),
    16: .same(proto: "WORLD_ONE_STATUS_PLAYER_ONE_EXITED"),
    17: .same(proto: "WORLD_ONE_STATUS_PLAYER_TWO_EXITED"),
    18: .same(proto: "WORLD_ONE_STATUS_ABANDONED"),
  ]
}

extension Lumbay2sv_WorldOneRegionId: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "WORLD_ONE_REGION_ID_NONE"),
    1: .same(proto: "WORLD_ONE_REGION_ID_ONE"),
  ]
}

extension Lumbay2sv_WorldOneObjectId: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "WORLD_ONE_OBJECT_ID_NONE"),
    1: .same(proto: "WORLD_ONE_OBJECT_ID_PLAYER_ONE_STONE_ONE"),
    2: .same(proto: "WORLD_ONE_OBJECT_ID_PLAYER_ONE_STONE_TWO"),
    3: .same(proto: "WORLD_ONE_OBJECT_ID_PLAYER_ONE_STONE_THREE"),
    4: .same(proto: "WORLD_ONE_OBJECT_ID_PLAYER_TWO_STONE_ONE"),
    5: .same(proto: "WORLD_ONE_OBJECT_ID_PLAYER_TWO_STONE_TWO"),
    6: .same(proto: "WORLD_ONE_OBJECT_ID_PLAYER_TWO_STONE_THREE"),
    7: .same(proto: "WORLD_ONE_OBJECT_ID_STONE_PLAYER_ONE"),
    8: .same(proto: "WORLD_ONE_OBJECT_ID_STONE_PLAYER_TWO"),
  ]
}

extension Lumbay2sv_WorldOneObjectStatus: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "WORLD_ONE_OBJECT_STATUS_NONE"),
    1: .same(proto: "WORLD_ONE_OBJECT_STATUS_SPAWNED"),
    2: .same(proto: "WORLD_ONE_OBJECT_STATUS_MOVED"),
    3: .same(proto: "WORLD_ONE_OBJECT_STATUS_ASSIGNED"),
  ]
}

extension Lumbay2sv_Update: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Update"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sequence_number"),
    2: .same(proto: "ping"),
    3: .standard(proto: "you_are_in_game_update"),
    4: .standard(proto: "waiting_for_other_player_update"),
    5: .standard(proto: "ready_to_start_update"),
    6: .standard(proto: "game_code_generated"),
    7: .standard(proto: "you_quit_the_game_update"),
    8: .standard(proto: "game_started_update"),
    9: .standard(proto: "world_one_region_update"),
    10: .standard(proto: "world_one_status_update"),
    11: .standard(proto: "world_one_object_update"),
    12: .standard(proto: "you_confirm_for_restart_update"),
    13: .standard(proto: "other_confirms_for_restart_update"),
    14: .standard(proto: "you_exit_world_update"),
    15: .standard(proto: "other_exits_world_update"),
    16: .standard(proto: "other_player_not_yet_ready_update"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.sequenceNumber) }()
      case 2: try {
        var v: Lumbay2sv_Ping?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .ping(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .ping(v)
        }
      }()
      case 3: try {
        var v: Lumbay2sv_YouAreInGameUpdate?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .youAreInGameUpdate(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .youAreInGameUpdate(v)
        }
      }()
      case 4: try {
        var v: Lumbay2sv_WaitingForOtherPlayerUpdate?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .waitingForOtherPlayerUpdate(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .waitingForOtherPlayerUpdate(v)
        }
      }()
      case 5: try {
        var v: Lumbay2sv_ReadyToStartUpdate?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .readyToStartUpdate(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .readyToStartUpdate(v)
        }
      }()
      case 6: try {
        var v: Lumbay2sv_GameCodeGeneratedUpdate?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .gameCodeGenerated(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .gameCodeGenerated(v)
        }
      }()
      case 7: try {
        var v: Lumbay2sv_YouQuitTheGameUpdate?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .youQuitTheGameUpdate(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .youQuitTheGameUpdate(v)
        }
      }()
      case 8: try {
        var v: Lumbay2sv_GameStartedUpdate?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .gameStartedUpdate(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .gameStartedUpdate(v)
        }
      }()
      case 9: try {
        var v: Lumbay2sv_WorldOneRegionUpdate?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .worldOneRegionUpdate(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .worldOneRegionUpdate(v)
        }
      }()
      case 10: try {
        var v: Lumbay2sv_WorldOneStatusUpdate?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .worldOneStatusUpdate(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .worldOneStatusUpdate(v)
        }
      }()
      case 11: try {
        var v: Lumbay2sv_WorldOneObjectUpdate?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .worldOneObjectUpdate(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .worldOneObjectUpdate(v)
        }
      }()
      case 12: try {
        var v: Lumbay2sv_YouConfirmForRestartUpdate?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .youConfirmForRestartUpdate(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .youConfirmForRestartUpdate(v)
        }
      }()
      case 13: try {
        var v: Lumbay2sv_OtherConfirmsForRestartUpdate?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .otherConfirmsForRestartUpdate(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .otherConfirmsForRestartUpdate(v)
        }
      }()
      case 14: try {
        var v: Lumbay2sv_YouExitWorldUpdate?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .youExitWorldUpdate(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .youExitWorldUpdate(v)
        }
      }()
      case 15: try {
        var v: Lumbay2sv_OtherExitsWorldUpdate?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .otherExitsWorldUpdate(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .otherExitsWorldUpdate(v)
        }
      }()
      case 16: try {
        var v: Lumbay2sv_OtherPlayerNotYetReadyUpdate?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .otherPlayerNotYetReadyUpdate(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .otherPlayerNotYetReadyUpdate(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.sequenceNumber != 0 {
      try visitor.visitSingularInt64Field(value: self.sequenceNumber, fieldNumber: 1)
    }
    switch self.type {
    case .ping?: try {
      guard case .ping(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .youAreInGameUpdate?: try {
      guard case .youAreInGameUpdate(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .waitingForOtherPlayerUpdate?: try {
      guard case .waitingForOtherPlayerUpdate(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .readyToStartUpdate?: try {
      guard case .readyToStartUpdate(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .gameCodeGenerated?: try {
      guard case .gameCodeGenerated(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case .youQuitTheGameUpdate?: try {
      guard case .youQuitTheGameUpdate(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    case .gameStartedUpdate?: try {
      guard case .gameStartedUpdate(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }()
    case .worldOneRegionUpdate?: try {
      guard case .worldOneRegionUpdate(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }()
    case .worldOneStatusUpdate?: try {
      guard case .worldOneStatusUpdate(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }()
    case .worldOneObjectUpdate?: try {
      guard case .worldOneObjectUpdate(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    }()
    case .youConfirmForRestartUpdate?: try {
      guard case .youConfirmForRestartUpdate(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
    }()
    case .otherConfirmsForRestartUpdate?: try {
      guard case .otherConfirmsForRestartUpdate(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
    }()
    case .youExitWorldUpdate?: try {
      guard case .youExitWorldUpdate(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
    }()
    case .otherExitsWorldUpdate?: try {
      guard case .otherExitsWorldUpdate(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
    }()
    case .otherPlayerNotYetReadyUpdate?: try {
      guard case .otherPlayerNotYetReadyUpdate(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_Update, rhs: Lumbay2sv_Update) -> Bool {
    if lhs.sequenceNumber != rhs.sequenceNumber {return false}
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Request"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "acquire_client_id_request"),
    2: .standard(proto: "acquire_public_key_request"),
    3: .standard(proto: "create_game_request"),
    4: .standard(proto: "generate_game_code_request"),
    5: .standard(proto: "join_game_request"),
    6: .standard(proto: "quit_game_request"),
    7: .standard(proto: "start_game_request"),
    8: .standard(proto: "process_world_one_object_request"),
    9: .standard(proto: "restart_world_request"),
    10: .standard(proto: "exit_world_request"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Lumbay2sv_AcquireClientIdRequest?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .acquireClientIDRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .acquireClientIDRequest(v)
        }
      }()
      case 2: try {
        var v: Lumbay2sv_AcquirePublicKeyRequest?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .acquirePublicKeyRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .acquirePublicKeyRequest(v)
        }
      }()
      case 3: try {
        var v: Lumbay2sv_CreateGameRequest?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .createGameRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .createGameRequest(v)
        }
      }()
      case 4: try {
        var v: Lumbay2sv_GenerateGameCodeRequest?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .generateGameCodeRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .generateGameCodeRequest(v)
        }
      }()
      case 5: try {
        var v: Lumbay2sv_JoinGameRequest?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .joinGameRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .joinGameRequest(v)
        }
      }()
      case 6: try {
        var v: Lumbay2sv_QuitGameRequest?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .quitGameRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .quitGameRequest(v)
        }
      }()
      case 7: try {
        var v: Lumbay2sv_StartGameRequest?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .startGameRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .startGameRequest(v)
        }
      }()
      case 8: try {
        var v: Lumbay2sv_ProcessWorldOneObjectRequest?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .processWorldOneObjectRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .processWorldOneObjectRequest(v)
        }
      }()
      case 9: try {
        var v: Lumbay2sv_RestartWorldRequest?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .restartWorldRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .restartWorldRequest(v)
        }
      }()
      case 10: try {
        var v: Lumbay2sv_ExitWorldRequest?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .exitWorldRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .exitWorldRequest(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.type {
    case .acquireClientIDRequest?: try {
      guard case .acquireClientIDRequest(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .acquirePublicKeyRequest?: try {
      guard case .acquirePublicKeyRequest(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .createGameRequest?: try {
      guard case .createGameRequest(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .generateGameCodeRequest?: try {
      guard case .generateGameCodeRequest(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .joinGameRequest?: try {
      guard case .joinGameRequest(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .quitGameRequest?: try {
      guard case .quitGameRequest(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case .startGameRequest?: try {
      guard case .startGameRequest(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    case .processWorldOneObjectRequest?: try {
      guard case .processWorldOneObjectRequest(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }()
    case .restartWorldRequest?: try {
      guard case .restartWorldRequest(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }()
    case .exitWorldRequest?: try {
      guard case .exitWorldRequest(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_Request, rhs: Lumbay2sv_Request) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_Reply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Reply"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "acquire_client_id_reply"),
    2: .standard(proto: "acquire_public_key_reply"),
    3: .standard(proto: "create_game_reply"),
    4: .standard(proto: "generate_game_code_reply"),
    5: .standard(proto: "join_game_reply"),
    6: .standard(proto: "quit_game_reply"),
    7: .standard(proto: "start_game_reply"),
    8: .standard(proto: "process_world_one_object_reply"),
    9: .standard(proto: "restart_world_reply"),
    10: .standard(proto: "exit_world_reply"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Lumbay2sv_AcquireClientIdReply?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .acquireClientIDReply(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .acquireClientIDReply(v)
        }
      }()
      case 2: try {
        var v: Lumbay2sv_AcquirePublicKeyReply?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .acquirePublicKeyReply(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .acquirePublicKeyReply(v)
        }
      }()
      case 3: try {
        var v: Lumbay2sv_CreateGameReply?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .createGameReply(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .createGameReply(v)
        }
      }()
      case 4: try {
        var v: Lumbay2sv_GenerateGameCodeReply?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .generateGameCodeReply(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .generateGameCodeReply(v)
        }
      }()
      case 5: try {
        var v: Lumbay2sv_JoinGameReply?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .joinGameReply(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .joinGameReply(v)
        }
      }()
      case 6: try {
        var v: Lumbay2sv_QuitGameReply?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .quitGameReply(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .quitGameReply(v)
        }
      }()
      case 7: try {
        var v: Lumbay2sv_StartGameReply?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .startGameReply(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .startGameReply(v)
        }
      }()
      case 8: try {
        var v: Lumbay2sv_ProcessWorldOneObjectReply?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .processWorldOneObjectReply(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .processWorldOneObjectReply(v)
        }
      }()
      case 9: try {
        var v: Lumbay2sv_RestartWorldReply?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .restartWorldReply(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .restartWorldReply(v)
        }
      }()
      case 10: try {
        var v: Lumbay2sv_ExitWorldReply?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .exitWorldReply(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .exitWorldReply(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.type {
    case .acquireClientIDReply?: try {
      guard case .acquireClientIDReply(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .acquirePublicKeyReply?: try {
      guard case .acquirePublicKeyReply(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .createGameReply?: try {
      guard case .createGameReply(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .generateGameCodeReply?: try {
      guard case .generateGameCodeReply(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .joinGameReply?: try {
      guard case .joinGameReply(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .quitGameReply?: try {
      guard case .quitGameReply(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case .startGameReply?: try {
      guard case .startGameReply(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    case .processWorldOneObjectReply?: try {
      guard case .processWorldOneObjectReply(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }()
    case .restartWorldReply?: try {
      guard case .restartWorldReply(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }()
    case .exitWorldReply?: try {
      guard case .exitWorldReply(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_Reply, rhs: Lumbay2sv_Reply) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_Empty: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Empty"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_Empty, rhs: Lumbay2sv_Empty) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_AcquireClientIdRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AcquireClientIdRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_AcquireClientIdRequest, rhs: Lumbay2sv_AcquireClientIdRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_AcquirePublicKeyRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AcquirePublicKeyRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_AcquirePublicKeyRequest, rhs: Lumbay2sv_AcquirePublicKeyRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_AcquireClientIdReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AcquireClientIdReply"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "client_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.clientID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.clientID.isEmpty {
      try visitor.visitSingularStringField(value: self.clientID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_AcquireClientIdReply, rhs: Lumbay2sv_AcquireClientIdReply) -> Bool {
    if lhs.clientID != rhs.clientID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_AcquirePublicKeyReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AcquirePublicKeyReply"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "public_key"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.publicKey) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.publicKey.isEmpty {
      try visitor.visitSingularStringField(value: self.publicKey, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_AcquirePublicKeyReply, rhs: Lumbay2sv_AcquirePublicKeyReply) -> Bool {
    if lhs.publicKey != rhs.publicKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_CreateGameRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateGameRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_CreateGameRequest, rhs: Lumbay2sv_CreateGameRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_CreateGameReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateGameReply"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_CreateGameReply, rhs: Lumbay2sv_CreateGameReply) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_GenerateGameCodeRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GenerateGameCodeRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_GenerateGameCodeRequest, rhs: Lumbay2sv_GenerateGameCodeRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_GenerateGameCodeReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GenerateGameCodeReply"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_GenerateGameCodeReply, rhs: Lumbay2sv_GenerateGameCodeReply) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_JoinGameRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".JoinGameRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "gameCode"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.gameCode) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.gameCode.isEmpty {
      try visitor.visitSingularStringField(value: self.gameCode, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_JoinGameRequest, rhs: Lumbay2sv_JoinGameRequest) -> Bool {
    if lhs.gameCode != rhs.gameCode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_JoinGameReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".JoinGameReply"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_JoinGameReply, rhs: Lumbay2sv_JoinGameReply) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_QuitGameRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".QuitGameRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_QuitGameRequest, rhs: Lumbay2sv_QuitGameRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_QuitGameReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".QuitGameReply"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_QuitGameReply, rhs: Lumbay2sv_QuitGameReply) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_StartGameRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StartGameRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_StartGameRequest, rhs: Lumbay2sv_StartGameRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_StartGameReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StartGameReply"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_StartGameReply, rhs: Lumbay2sv_StartGameReply) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_RestartWorldRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RestartWorldRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_RestartWorldRequest, rhs: Lumbay2sv_RestartWorldRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_RestartWorldReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RestartWorldReply"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_RestartWorldReply, rhs: Lumbay2sv_RestartWorldReply) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_ExitWorldRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ExitWorldRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_ExitWorldRequest, rhs: Lumbay2sv_ExitWorldRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_ExitWorldReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ExitWorldReply"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_ExitWorldReply, rhs: Lumbay2sv_ExitWorldReply) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_Game: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Game"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "player1"),
    3: .same(proto: "player2"),
    4: .same(proto: "status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.player1) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.player2) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.player1.isEmpty {
      try visitor.visitSingularStringField(value: self.player1, fieldNumber: 2)
    }
    if !self.player2.isEmpty {
      try visitor.visitSingularStringField(value: self.player2, fieldNumber: 3)
    }
    if self.status != .none {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_Game, rhs: Lumbay2sv_Game) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.player1 != rhs.player1 {return false}
    if lhs.player2 != rhs.player2 {return false}
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_Client: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Client"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "salt"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.salt) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.salt.isEmpty {
      try visitor.visitSingularStringField(value: self.salt, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_Client, rhs: Lumbay2sv_Client) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.salt != rhs.salt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_Ping: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Ping"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_Ping, rhs: Lumbay2sv_Ping) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_YouAreInGameUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".YouAreInGameUpdate"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_YouAreInGameUpdate, rhs: Lumbay2sv_YouAreInGameUpdate) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_WaitingForOtherPlayerUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WaitingForOtherPlayerUpdate"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_WaitingForOtherPlayerUpdate, rhs: Lumbay2sv_WaitingForOtherPlayerUpdate) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_ReadyToStartUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ReadyToStartUpdate"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_ReadyToStartUpdate, rhs: Lumbay2sv_ReadyToStartUpdate) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_GameCodeGeneratedUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GameCodeGeneratedUpdate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "game_code"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.gameCode) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.gameCode.isEmpty {
      try visitor.visitSingularStringField(value: self.gameCode, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_GameCodeGeneratedUpdate, rhs: Lumbay2sv_GameCodeGeneratedUpdate) -> Bool {
    if lhs.gameCode != rhs.gameCode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_YouQuitTheGameUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".YouQuitTheGameUpdate"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_YouQuitTheGameUpdate, rhs: Lumbay2sv_YouQuitTheGameUpdate) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_GameStartedUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GameStartedUpdate"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_GameStartedUpdate, rhs: Lumbay2sv_GameStartedUpdate) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_YouConfirmForRestartUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".YouConfirmForRestartUpdate"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_YouConfirmForRestartUpdate, rhs: Lumbay2sv_YouConfirmForRestartUpdate) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_OtherConfirmsForRestartUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".OtherConfirmsForRestartUpdate"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_OtherConfirmsForRestartUpdate, rhs: Lumbay2sv_OtherConfirmsForRestartUpdate) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_YouExitWorldUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".YouExitWorldUpdate"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_YouExitWorldUpdate, rhs: Lumbay2sv_YouExitWorldUpdate) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_OtherExitsWorldUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".OtherExitsWorldUpdate"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_OtherExitsWorldUpdate, rhs: Lumbay2sv_OtherExitsWorldUpdate) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_OtherPlayerNotYetReadyUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".OtherPlayerNotYetReadyUpdate"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_OtherPlayerNotYetReadyUpdate, rhs: Lumbay2sv_OtherPlayerNotYetReadyUpdate) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_World: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".World"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "db_id"),
    2: .same(proto: "id"),
    3: .standard(proto: "world_one"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.dbID) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.id) }()
      case 3: try {
        var v: Lumbay2sv_WorldOne?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .worldOne(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .worldOne(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.dbID.isEmpty {
      try visitor.visitSingularStringField(value: self.dbID, fieldNumber: 1)
    }
    if self.id != .none {
      try visitor.visitSingularEnumField(value: self.id, fieldNumber: 2)
    }
    try { if case .worldOne(let v)? = self.type {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_World, rhs: Lumbay2sv_World) -> Bool {
    if lhs.dbID != rhs.dbID {return false}
    if lhs.id != rhs.id {return false}
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_WorldOne: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WorldOne"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "status"),
    3: .same(proto: "region"),
    4: .same(proto: "regions"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._region) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.regions) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.status != .none {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 2)
    }
    try { if let v = self._region {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.regions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.regions, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_WorldOne, rhs: Lumbay2sv_WorldOne) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs._region != rhs._region {return false}
    if lhs.regions != rhs.regions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_WorldOneRegion: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WorldOneRegion"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "objects"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.id) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.objects) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != .none {
      try visitor.visitSingularEnumField(value: self.id, fieldNumber: 1)
    }
    if !self.objects.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.objects, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_WorldOneRegion, rhs: Lumbay2sv_WorldOneRegion) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.objects != rhs.objects {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_WorldOneObject: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WorldOneObject"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "data"),
    3: .same(proto: "status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._data) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.id != .none {
      try visitor.visitSingularEnumField(value: self.id, fieldNumber: 1)
    }
    try { if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if self.status != .none {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_WorldOneObject, rhs: Lumbay2sv_WorldOneObject) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._data != rhs._data {return false}
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_WorldOneObjectData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WorldOneObjectData"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "location"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Lumbay2sv_WorldLocation?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .location(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .location(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if case .location(let v)? = self.type {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_WorldOneObjectData, rhs: Lumbay2sv_WorldOneObjectData) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_WorldLocation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WorldLocation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "x"),
    2: .same(proto: "y"),
    3: .same(proto: "z"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.x) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.y) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.z) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.x != 0 {
      try visitor.visitSingularInt64Field(value: self.x, fieldNumber: 1)
    }
    if self.y != 0 {
      try visitor.visitSingularInt64Field(value: self.y, fieldNumber: 2)
    }
    if self.z != 0 {
      try visitor.visitSingularInt64Field(value: self.z, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_WorldLocation, rhs: Lumbay2sv_WorldLocation) -> Bool {
    if lhs.x != rhs.x {return false}
    if lhs.y != rhs.y {return false}
    if lhs.z != rhs.z {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_WorldOneRegionUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WorldOneRegionUpdate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "region_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.regionID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.regionID != .none {
      try visitor.visitSingularEnumField(value: self.regionID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_WorldOneRegionUpdate, rhs: Lumbay2sv_WorldOneRegionUpdate) -> Bool {
    if lhs.regionID != rhs.regionID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_WorldOneStatusUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WorldOneStatusUpdate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "region_id"),
    2: .same(proto: "status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.regionID) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.regionID != .none {
      try visitor.visitSingularEnumField(value: self.regionID, fieldNumber: 1)
    }
    if self.status != .none {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_WorldOneStatusUpdate, rhs: Lumbay2sv_WorldOneStatusUpdate) -> Bool {
    if lhs.regionID != rhs.regionID {return false}
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_WorldOneObjectUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WorldOneObjectUpdate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "region_id"),
    2: .standard(proto: "object_id"),
    3: .standard(proto: "object_status"),
    4: .standard(proto: "object_data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.regionID) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.objectID) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.objectStatus) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._objectData) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.regionID != .none {
      try visitor.visitSingularEnumField(value: self.regionID, fieldNumber: 1)
    }
    if self.objectID != .none {
      try visitor.visitSingularEnumField(value: self.objectID, fieldNumber: 2)
    }
    if self.objectStatus != .none {
      try visitor.visitSingularEnumField(value: self.objectStatus, fieldNumber: 3)
    }
    try { if let v = self._objectData {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_WorldOneObjectUpdate, rhs: Lumbay2sv_WorldOneObjectUpdate) -> Bool {
    if lhs.regionID != rhs.regionID {return false}
    if lhs.objectID != rhs.objectID {return false}
    if lhs.objectStatus != rhs.objectStatus {return false}
    if lhs._objectData != rhs._objectData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_ProcessWorldOneObjectRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ProcessWorldOneObjectRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "region_id"),
    2: .standard(proto: "object_id"),
    3: .standard(proto: "object_status"),
    4: .standard(proto: "object_data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.regionID) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.objectID) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.objectStatus) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._objectData) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.regionID != .none {
      try visitor.visitSingularEnumField(value: self.regionID, fieldNumber: 1)
    }
    if self.objectID != .none {
      try visitor.visitSingularEnumField(value: self.objectID, fieldNumber: 2)
    }
    if self.objectStatus != .none {
      try visitor.visitSingularEnumField(value: self.objectStatus, fieldNumber: 3)
    }
    try { if let v = self._objectData {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_ProcessWorldOneObjectRequest, rhs: Lumbay2sv_ProcessWorldOneObjectRequest) -> Bool {
    if lhs.regionID != rhs.regionID {return false}
    if lhs.objectID != rhs.objectID {return false}
    if lhs.objectStatus != rhs.objectStatus {return false}
    if lhs._objectData != rhs._objectData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lumbay2sv_ProcessWorldOneObjectReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ProcessWorldOneObjectReply"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Lumbay2sv_ProcessWorldOneObjectReply, rhs: Lumbay2sv_ProcessWorldOneObjectReply) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
